"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = void 0;
const command_1 = require("../command");
const projectUtils_1 = require("../projectUtils");
const fileUtils_1 = require("../dataconnect/fileUtils");
const logger_1 = require("../logger");
const error_1 = require("../error");
const schemaMigration_1 = require("../dataconnect/schemaMigration");
const requireAuth_1 = require("../requireAuth");
const requirePermissions_1 = require("../requirePermissions");
const ensureApis_1 = require("../dataconnect/ensureApis");
exports.command = new command_1.Command("dataconnect:sql:migrate [serviceId]")
    .description("migrates your CloudSQL database's schema to match your local DataConnect schema")
    .before(requirePermissions_1.requirePermissions, [
    "firebasedataconnect.services.list",
    "firebasedataconnect.schemas.list",
    "firebasedataconnect.schemas.update",
    "cloudsql.instances.connect",
    "cloudsql.users.create",
])
    .before(requireAuth_1.requireAuth)
    .withForce("Execute any required database changes without prompting")
    .action(async (serviceId, options) => {
    var _a;
    const projectId = (0, projectUtils_1.needProjectId)(options);
    await (0, ensureApis_1.ensureApis)(projectId);
    const serviceInfo = await (0, fileUtils_1.pickService)(projectId, options.config, serviceId);
    const instanceId = (_a = serviceInfo.dataConnectYaml.schema.datasource.postgresql) === null || _a === void 0 ? void 0 : _a.cloudSql.instanceId;
    if (!instanceId) {
        throw new error_1.FirebaseError("dataconnect.yaml is missing field schema.datasource.postgresql.cloudsql.instanceId");
    }
    const diffs = await (0, schemaMigration_1.migrateSchema)({
        options,
        schema: serviceInfo.schema,
        allowNonInteractiveMigration: true,
        validateOnly: true,
    });
    if (diffs.length) {
        logger_1.logger.info(`Schema sucessfully migrated! Run 'firebase deploy' to deploy your new schema to your Data Connect service.`);
    }
    else {
        logger_1.logger.info("Schema was already up to date!");
    }
    return { projectId, serviceId, diffs };
});
